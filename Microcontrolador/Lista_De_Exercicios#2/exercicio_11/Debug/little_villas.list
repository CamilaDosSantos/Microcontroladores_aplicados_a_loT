
little_villas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d2c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001de8  08001de8  00011de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e68  08001e68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e68  08001e68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e68  08001e68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e68  08001e68  00011e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e6c  08001e6c  00011e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  08001e7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08001e7c  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000047c6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001166  00000000  00000000  000247fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000518  00000000  00000000  00025960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000480  00000000  00000000  00025e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019741  00000000  00000000  000262f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000056c2  00000000  00000000  0003fa39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a523a  00000000  00000000  000450fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea335  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000105c  00000000  00000000  000ea388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001dd0 	.word	0x08001dd0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08001dd0 	.word	0x08001dd0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fd84 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 fbc4 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 fc20 	bl	8000a6c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  delay_ms = 1;
 800022c:	4be6      	ldr	r3, [pc, #920]	; (80005c8 <main+0x3ac>)
 800022e:	2201      	movs	r2, #1
 8000230:	601a      	str	r2, [r3, #0]

  while (1){

	  d_1 = HAL_GPIO_ReadPin(dip_1_GPIO_Port, dip_1_Pin)*8;
 8000232:	2380      	movs	r3, #128	; 0x80
 8000234:	005b      	lsls	r3, r3, #1
 8000236:	4ae5      	ldr	r2, [pc, #916]	; (80005cc <main+0x3b0>)
 8000238:	0019      	movs	r1, r3
 800023a:	0010      	movs	r0, r2
 800023c:	f001 f832 	bl	80012a4 <HAL_GPIO_ReadPin>
 8000240:	0003      	movs	r3, r0
 8000242:	00db      	lsls	r3, r3, #3
 8000244:	b2da      	uxtb	r2, r3
 8000246:	4be2      	ldr	r3, [pc, #904]	; (80005d0 <main+0x3b4>)
 8000248:	701a      	strb	r2, [r3, #0]
	  d_2 = HAL_GPIO_ReadPin(dip_2_GPIO_Port, dip_2_Pin)*4;
 800024a:	4be0      	ldr	r3, [pc, #896]	; (80005cc <main+0x3b0>)
 800024c:	2140      	movs	r1, #64	; 0x40
 800024e:	0018      	movs	r0, r3
 8000250:	f001 f828 	bl	80012a4 <HAL_GPIO_ReadPin>
 8000254:	0003      	movs	r3, r0
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	b2da      	uxtb	r2, r3
 800025a:	4bde      	ldr	r3, [pc, #888]	; (80005d4 <main+0x3b8>)
 800025c:	701a      	strb	r2, [r3, #0]
	  d_3 = HAL_GPIO_ReadPin(dip_3_GPIO_Port, dip_3_Pin)*2;
 800025e:	23a0      	movs	r3, #160	; 0xa0
 8000260:	05db      	lsls	r3, r3, #23
 8000262:	2108      	movs	r1, #8
 8000264:	0018      	movs	r0, r3
 8000266:	f001 f81d 	bl	80012a4 <HAL_GPIO_ReadPin>
 800026a:	0003      	movs	r3, r0
 800026c:	18db      	adds	r3, r3, r3
 800026e:	b2da      	uxtb	r2, r3
 8000270:	4bd9      	ldr	r3, [pc, #868]	; (80005d8 <main+0x3bc>)
 8000272:	701a      	strb	r2, [r3, #0]
	  d_4 = HAL_GPIO_ReadPin(dip_4_GPIO_Port, dip_4_Pin)*1;
 8000274:	4bd9      	ldr	r3, [pc, #868]	; (80005dc <main+0x3c0>)
 8000276:	2140      	movs	r1, #64	; 0x40
 8000278:	0018      	movs	r0, r3
 800027a:	f001 f813 	bl	80012a4 <HAL_GPIO_ReadPin>
 800027e:	0003      	movs	r3, r0
 8000280:	001a      	movs	r2, r3
 8000282:	4bd7      	ldr	r3, [pc, #860]	; (80005e0 <main+0x3c4>)
 8000284:	701a      	strb	r2, [r3, #0]

	  soma = d_1 + d_2 + d_3 + d_4;
 8000286:	4bd2      	ldr	r3, [pc, #840]	; (80005d0 <main+0x3b4>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	b29a      	uxth	r2, r3
 800028c:	4bd1      	ldr	r3, [pc, #836]	; (80005d4 <main+0x3b8>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	b29b      	uxth	r3, r3
 8000292:	18d3      	adds	r3, r2, r3
 8000294:	b29a      	uxth	r2, r3
 8000296:	4bd0      	ldr	r3, [pc, #832]	; (80005d8 <main+0x3bc>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	b29b      	uxth	r3, r3
 800029c:	18d3      	adds	r3, r2, r3
 800029e:	b29a      	uxth	r2, r3
 80002a0:	4bcf      	ldr	r3, [pc, #828]	; (80005e0 <main+0x3c4>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	18d3      	adds	r3, r2, r3
 80002a8:	b29a      	uxth	r2, r3
 80002aa:	4bce      	ldr	r3, [pc, #824]	; (80005e4 <main+0x3c8>)
 80002ac:	801a      	strh	r2, [r3, #0]

	 switch(soma){
 80002ae:	4bcd      	ldr	r3, [pc, #820]	; (80005e4 <main+0x3c8>)
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	2b0f      	cmp	r3, #15
 80002b4:	d900      	bls.n	80002b8 <main+0x9c>
 80002b6:	e375      	b.n	80009a4 <main+0x788>
 80002b8:	009a      	lsls	r2, r3, #2
 80002ba:	4bcb      	ldr	r3, [pc, #812]	; (80005e8 <main+0x3cc>)
 80002bc:	18d3      	adds	r3, r2, r3
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	469f      	mov	pc, r3
	 	  case 0:
	 		  HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 0);
 80002c2:	4bca      	ldr	r3, [pc, #808]	; (80005ec <main+0x3d0>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	2101      	movs	r1, #1
 80002c8:	0018      	movs	r0, r3
 80002ca:	f001 f808 	bl	80012de <HAL_GPIO_WritePin>
	 	      HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 1);
 80002ce:	2380      	movs	r3, #128	; 0x80
 80002d0:	01db      	lsls	r3, r3, #7
 80002d2:	48c6      	ldr	r0, [pc, #792]	; (80005ec <main+0x3d0>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	0019      	movs	r1, r3
 80002d8:	f001 f801 	bl	80012de <HAL_GPIO_WritePin>
	 	      HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 1);
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	0059      	lsls	r1, r3, #1
 80002e0:	23a0      	movs	r3, #160	; 0xa0
 80002e2:	05db      	lsls	r3, r3, #23
 80002e4:	2201      	movs	r2, #1
 80002e6:	0018      	movs	r0, r3
 80002e8:	f000 fff9 	bl	80012de <HAL_GPIO_WritePin>
	 	      HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 1);
 80002ec:	4bbf      	ldr	r3, [pc, #764]	; (80005ec <main+0x3d0>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	2110      	movs	r1, #16
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fff3 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 1);
 80002f8:	2380      	movs	r3, #128	; 0x80
 80002fa:	0099      	lsls	r1, r3, #2
 80002fc:	23a0      	movs	r3, #160	; 0xa0
 80002fe:	05db      	lsls	r3, r3, #23
 8000300:	2201      	movs	r2, #1
 8000302:	0018      	movs	r0, r3
 8000304:	f000 ffeb 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 1);
 8000308:	4bb0      	ldr	r3, [pc, #704]	; (80005cc <main+0x3b0>)
 800030a:	2201      	movs	r2, #1
 800030c:	2180      	movs	r1, #128	; 0x80
 800030e:	0018      	movs	r0, r3
 8000310:	f000 ffe5 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 1);
 8000314:	4bb5      	ldr	r3, [pc, #724]	; (80005ec <main+0x3d0>)
 8000316:	2201      	movs	r2, #1
 8000318:	2108      	movs	r1, #8
 800031a:	0018      	movs	r0, r3
 800031c:	f000 ffdf 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_G10_GPIO_Port, seguimento_G10_Pin, 0);
 8000320:	4bb2      	ldr	r3, [pc, #712]	; (80005ec <main+0x3d0>)
 8000322:	2200      	movs	r2, #0
 8000324:	2120      	movs	r1, #32
 8000326:	0018      	movs	r0, r3
 8000328:	f000 ffd9 	bl	80012de <HAL_GPIO_WritePin>
	 		  break;
 800032c:	e33b      	b.n	80009a6 <main+0x78a>

	 	  case 1:
	 		              HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 0);
 800032e:	4baf      	ldr	r3, [pc, #700]	; (80005ec <main+0x3d0>)
 8000330:	2200      	movs	r2, #0
 8000332:	2108      	movs	r1, #8
 8000334:	0018      	movs	r0, r3
 8000336:	f000 ffd2 	bl	80012de <HAL_GPIO_WritePin>
	 		 	 		  HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 0);
 800033a:	4bac      	ldr	r3, [pc, #688]	; (80005ec <main+0x3d0>)
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	0018      	movs	r0, r3
 8000342:	f000 ffcc 	bl	80012de <HAL_GPIO_WritePin>
	 		 	 		  HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 1);
 8000346:	4ba9      	ldr	r3, [pc, #676]	; (80005ec <main+0x3d0>)
 8000348:	2201      	movs	r2, #1
 800034a:	2110      	movs	r1, #16
 800034c:	0018      	movs	r0, r3
 800034e:	f000 ffc6 	bl	80012de <HAL_GPIO_WritePin>
	 		 	 		  HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 0);
 8000352:	2380      	movs	r3, #128	; 0x80
 8000354:	01db      	lsls	r3, r3, #7
 8000356:	48a5      	ldr	r0, [pc, #660]	; (80005ec <main+0x3d0>)
 8000358:	2200      	movs	r2, #0
 800035a:	0019      	movs	r1, r3
 800035c:	f000 ffbf 	bl	80012de <HAL_GPIO_WritePin>
	 		 	 		  HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 1);
 8000360:	2380      	movs	r3, #128	; 0x80
 8000362:	0059      	lsls	r1, r3, #1
 8000364:	23a0      	movs	r3, #160	; 0xa0
 8000366:	05db      	lsls	r3, r3, #23
 8000368:	2201      	movs	r2, #1
 800036a:	0018      	movs	r0, r3
 800036c:	f000 ffb7 	bl	80012de <HAL_GPIO_WritePin>
	 		 	 		  HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 0);
 8000370:	2380      	movs	r3, #128	; 0x80
 8000372:	0099      	lsls	r1, r3, #2
 8000374:	23a0      	movs	r3, #160	; 0xa0
 8000376:	05db      	lsls	r3, r3, #23
 8000378:	2200      	movs	r2, #0
 800037a:	0018      	movs	r0, r3
 800037c:	f000 ffaf 	bl	80012de <HAL_GPIO_WritePin>
	 		 	 		  HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 0);
 8000380:	4b92      	ldr	r3, [pc, #584]	; (80005cc <main+0x3b0>)
 8000382:	2200      	movs	r2, #0
 8000384:	2180      	movs	r1, #128	; 0x80
 8000386:	0018      	movs	r0, r3
 8000388:	f000 ffa9 	bl	80012de <HAL_GPIO_WritePin>
	 		 	 		  HAL_GPIO_WritePin(seguimento_G10_GPIO_Port, seguimento_G10_Pin, 0);
 800038c:	4b97      	ldr	r3, [pc, #604]	; (80005ec <main+0x3d0>)
 800038e:	2200      	movs	r2, #0
 8000390:	2120      	movs	r1, #32
 8000392:	0018      	movs	r0, r3
 8000394:	f000 ffa3 	bl	80012de <HAL_GPIO_WritePin>
	 		  break;
 8000398:	e305      	b.n	80009a6 <main+0x78a>

	 	  case 2:
	 		  HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 0);
 800039a:	4b94      	ldr	r3, [pc, #592]	; (80005ec <main+0x3d0>)
 800039c:	2200      	movs	r2, #0
 800039e:	2108      	movs	r1, #8
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 ff9c 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 1);
 80003a6:	4b91      	ldr	r3, [pc, #580]	; (80005ec <main+0x3d0>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	2101      	movs	r1, #1
 80003ac:	0018      	movs	r0, r3
 80003ae:	f000 ff96 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 0);
 80003b2:	4b8e      	ldr	r3, [pc, #568]	; (80005ec <main+0x3d0>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	2110      	movs	r1, #16
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 ff90 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 1);
 80003be:	2380      	movs	r3, #128	; 0x80
 80003c0:	01db      	lsls	r3, r3, #7
 80003c2:	488a      	ldr	r0, [pc, #552]	; (80005ec <main+0x3d0>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	0019      	movs	r1, r3
 80003c8:	f000 ff89 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 1);
 80003cc:	2380      	movs	r3, #128	; 0x80
 80003ce:	0059      	lsls	r1, r3, #1
 80003d0:	23a0      	movs	r3, #160	; 0xa0
 80003d2:	05db      	lsls	r3, r3, #23
 80003d4:	2201      	movs	r2, #1
 80003d6:	0018      	movs	r0, r3
 80003d8:	f000 ff81 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 1);
 80003dc:	2380      	movs	r3, #128	; 0x80
 80003de:	0099      	lsls	r1, r3, #2
 80003e0:	23a0      	movs	r3, #160	; 0xa0
 80003e2:	05db      	lsls	r3, r3, #23
 80003e4:	2201      	movs	r2, #1
 80003e6:	0018      	movs	r0, r3
 80003e8:	f000 ff79 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 1);
 80003ec:	4b77      	ldr	r3, [pc, #476]	; (80005cc <main+0x3b0>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	2180      	movs	r1, #128	; 0x80
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 ff73 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_G10_GPIO_Port, seguimento_G10_Pin, 1);
 80003f8:	4b7c      	ldr	r3, [pc, #496]	; (80005ec <main+0x3d0>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	2120      	movs	r1, #32
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 ff6d 	bl	80012de <HAL_GPIO_WritePin>
	 		  break;
 8000404:	e2cf      	b.n	80009a6 <main+0x78a>

	 	  case 3:
	 		  HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 0);
 8000406:	4b79      	ldr	r3, [pc, #484]	; (80005ec <main+0x3d0>)
 8000408:	2200      	movs	r2, #0
 800040a:	2108      	movs	r1, #8
 800040c:	0018      	movs	r0, r3
 800040e:	f000 ff66 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 0);
 8000412:	4b76      	ldr	r3, [pc, #472]	; (80005ec <main+0x3d0>)
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	0018      	movs	r0, r3
 800041a:	f000 ff60 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 0);
 800041e:	4b6b      	ldr	r3, [pc, #428]	; (80005cc <main+0x3b0>)
 8000420:	2200      	movs	r2, #0
 8000422:	2180      	movs	r1, #128	; 0x80
 8000424:	0018      	movs	r0, r3
 8000426:	f000 ff5a 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 1);
 800042a:	2380      	movs	r3, #128	; 0x80
 800042c:	01db      	lsls	r3, r3, #7
 800042e:	486f      	ldr	r0, [pc, #444]	; (80005ec <main+0x3d0>)
 8000430:	2201      	movs	r2, #1
 8000432:	0019      	movs	r1, r3
 8000434:	f000 ff53 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 1);
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	0059      	lsls	r1, r3, #1
 800043c:	23a0      	movs	r3, #160	; 0xa0
 800043e:	05db      	lsls	r3, r3, #23
 8000440:	2201      	movs	r2, #1
 8000442:	0018      	movs	r0, r3
 8000444:	f000 ff4b 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 1);
 8000448:	4b68      	ldr	r3, [pc, #416]	; (80005ec <main+0x3d0>)
 800044a:	2201      	movs	r2, #1
 800044c:	2110      	movs	r1, #16
 800044e:	0018      	movs	r0, r3
 8000450:	f000 ff45 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 1);
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	0099      	lsls	r1, r3, #2
 8000458:	23a0      	movs	r3, #160	; 0xa0
 800045a:	05db      	lsls	r3, r3, #23
 800045c:	2201      	movs	r2, #1
 800045e:	0018      	movs	r0, r3
 8000460:	f000 ff3d 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_G10_GPIO_Port, seguimento_G10_Pin, 1);
 8000464:	4b61      	ldr	r3, [pc, #388]	; (80005ec <main+0x3d0>)
 8000466:	2201      	movs	r2, #1
 8000468:	2120      	movs	r1, #32
 800046a:	0018      	movs	r0, r3
 800046c:	f000 ff37 	bl	80012de <HAL_GPIO_WritePin>
	 		  break;
 8000470:	e299      	b.n	80009a6 <main+0x78a>

	 	  case 4:
	 		  HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 0);
 8000472:	2380      	movs	r3, #128	; 0x80
 8000474:	01db      	lsls	r3, r3, #7
 8000476:	485d      	ldr	r0, [pc, #372]	; (80005ec <main+0x3d0>)
 8000478:	2200      	movs	r2, #0
 800047a:	0019      	movs	r1, r3
 800047c:	f000 ff2f 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 0);
 8000480:	2380      	movs	r3, #128	; 0x80
 8000482:	0099      	lsls	r1, r3, #2
 8000484:	23a0      	movs	r3, #160	; 0xa0
 8000486:	05db      	lsls	r3, r3, #23
 8000488:	2200      	movs	r2, #0
 800048a:	0018      	movs	r0, r3
 800048c:	f000 ff27 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 0);
 8000490:	4b4e      	ldr	r3, [pc, #312]	; (80005cc <main+0x3b0>)
 8000492:	2200      	movs	r2, #0
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	0018      	movs	r0, r3
 8000498:	f000 ff21 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 1);
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	0059      	lsls	r1, r3, #1
 80004a0:	23a0      	movs	r3, #160	; 0xa0
 80004a2:	05db      	lsls	r3, r3, #23
 80004a4:	2201      	movs	r2, #1
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 ff19 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 0);
 80004ac:	4b4f      	ldr	r3, [pc, #316]	; (80005ec <main+0x3d0>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	2101      	movs	r1, #1
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 ff13 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 1);
 80004b8:	4b4c      	ldr	r3, [pc, #304]	; (80005ec <main+0x3d0>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	2110      	movs	r1, #16
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 ff0d 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 1);
 80004c4:	4b49      	ldr	r3, [pc, #292]	; (80005ec <main+0x3d0>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	2108      	movs	r1, #8
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 ff07 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_G10_GPIO_Port, seguimento_G10_Pin, 1);
 80004d0:	4b46      	ldr	r3, [pc, #280]	; (80005ec <main+0x3d0>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	2120      	movs	r1, #32
 80004d6:	0018      	movs	r0, r3
 80004d8:	f000 ff01 	bl	80012de <HAL_GPIO_WritePin>
	 		  break;
 80004dc:	e263      	b.n	80009a6 <main+0x78a>

	 	  case 5:
	 		  HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 0);
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	0099      	lsls	r1, r3, #2
 80004e2:	23a0      	movs	r3, #160	; 0xa0
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	2200      	movs	r2, #0
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 fef8 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 0);
 80004ee:	4b37      	ldr	r3, [pc, #220]	; (80005cc <main+0x3b0>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 fef2 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 0);
 80004fa:	4b3c      	ldr	r3, [pc, #240]	; (80005ec <main+0x3d0>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	2101      	movs	r1, #1
 8000500:	0018      	movs	r0, r3
 8000502:	f000 feec 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 1);
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	01db      	lsls	r3, r3, #7
 800050a:	4838      	ldr	r0, [pc, #224]	; (80005ec <main+0x3d0>)
 800050c:	2201      	movs	r2, #1
 800050e:	0019      	movs	r1, r3
 8000510:	f000 fee5 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 1);
 8000514:	4b35      	ldr	r3, [pc, #212]	; (80005ec <main+0x3d0>)
 8000516:	2201      	movs	r2, #1
 8000518:	2110      	movs	r1, #16
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fedf 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 1);
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	0099      	lsls	r1, r3, #2
 8000524:	23a0      	movs	r3, #160	; 0xa0
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	2201      	movs	r2, #1
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fed7 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 1);
 8000530:	4b2e      	ldr	r3, [pc, #184]	; (80005ec <main+0x3d0>)
 8000532:	2201      	movs	r2, #1
 8000534:	2108      	movs	r1, #8
 8000536:	0018      	movs	r0, r3
 8000538:	f000 fed1 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_G10_GPIO_Port, seguimento_G10_Pin, 1);
 800053c:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <main+0x3d0>)
 800053e:	2201      	movs	r2, #1
 8000540:	2120      	movs	r1, #32
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fecb 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 0);
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	0059      	lsls	r1, r3, #1
 800054c:	23a0      	movs	r3, #160	; 0xa0
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	2200      	movs	r2, #0
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fec3 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  break;
 8000558:	e225      	b.n	80009a6 <main+0x78a>

	 	  case 6:
	 		  HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 0);
 800055a:	2380      	movs	r3, #128	; 0x80
 800055c:	0059      	lsls	r1, r3, #1
 800055e:	23a0      	movs	r3, #160	; 0xa0
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	2200      	movs	r2, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f000 feba 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 0);
 800056a:	4b20      	ldr	r3, [pc, #128]	; (80005ec <main+0x3d0>)
 800056c:	2200      	movs	r2, #0
 800056e:	2101      	movs	r1, #1
 8000570:	0018      	movs	r0, r3
 8000572:	f000 feb4 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 1);
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	01db      	lsls	r3, r3, #7
 800057a:	481c      	ldr	r0, [pc, #112]	; (80005ec <main+0x3d0>)
 800057c:	2201      	movs	r2, #1
 800057e:	0019      	movs	r1, r3
 8000580:	f000 fead 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 1);
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <main+0x3d0>)
 8000586:	2201      	movs	r2, #1
 8000588:	2110      	movs	r1, #16
 800058a:	0018      	movs	r0, r3
 800058c:	f000 fea7 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 1);
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	0099      	lsls	r1, r3, #2
 8000594:	23a0      	movs	r3, #160	; 0xa0
 8000596:	05db      	lsls	r3, r3, #23
 8000598:	2201      	movs	r2, #1
 800059a:	0018      	movs	r0, r3
 800059c:	f000 fe9f 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 1);
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <main+0x3b0>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fe99 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 1);
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <main+0x3d0>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	2108      	movs	r1, #8
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 fe93 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_G10_GPIO_Port, seguimento_G10_Pin, 1);
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <main+0x3d0>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	2120      	movs	r1, #32
 80005be:	0018      	movs	r0, r3
 80005c0:	f000 fe8d 	bl	80012de <HAL_GPIO_WritePin>
	 		  break;
 80005c4:	e1ef      	b.n	80009a6 <main+0x78a>
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	2000002c 	.word	0x2000002c
 80005cc:	50000800 	.word	0x50000800
 80005d0:	20000029 	.word	0x20000029
 80005d4:	20000030 	.word	0x20000030
 80005d8:	20000028 	.word	0x20000028
 80005dc:	50000c00 	.word	0x50000c00
 80005e0:	20000031 	.word	0x20000031
 80005e4:	2000002a 	.word	0x2000002a
 80005e8:	08001de8 	.word	0x08001de8
 80005ec:	50000400 	.word	0x50000400

	 	  case 7:

	 	      HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 0);
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	0099      	lsls	r1, r3, #2
 80005f4:	23a0      	movs	r3, #160	; 0xa0
 80005f6:	05db      	lsls	r3, r3, #23
 80005f8:	2200      	movs	r2, #0
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 fe6f 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 0);
 8000600:	4be9      	ldr	r3, [pc, #932]	; (80009a8 <main+0x78c>)
 8000602:	2200      	movs	r2, #0
 8000604:	2110      	movs	r1, #16
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fe69 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 0);
 800060c:	4be6      	ldr	r3, [pc, #920]	; (80009a8 <main+0x78c>)
 800060e:	2200      	movs	r2, #0
 8000610:	2101      	movs	r1, #1
 8000612:	0018      	movs	r0, r3
 8000614:	f000 fe63 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 0);
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	0059      	lsls	r1, r3, #1
 800061c:	23a0      	movs	r3, #160	; 0xa0
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	2200      	movs	r2, #0
 8000622:	0018      	movs	r0, r3
 8000624:	f000 fe5b 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 1);
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	01db      	lsls	r3, r3, #7
 800062c:	48de      	ldr	r0, [pc, #888]	; (80009a8 <main+0x78c>)
 800062e:	2201      	movs	r2, #1
 8000630:	0019      	movs	r1, r3
 8000632:	f000 fe54 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 1);
 8000636:	4bdd      	ldr	r3, [pc, #884]	; (80009ac <main+0x790>)
 8000638:	2201      	movs	r2, #1
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fe4e 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 1);
 8000642:	4bd9      	ldr	r3, [pc, #868]	; (80009a8 <main+0x78c>)
 8000644:	2201      	movs	r2, #1
 8000646:	2108      	movs	r1, #8
 8000648:	0018      	movs	r0, r3
 800064a:	f000 fe48 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_G10_GPIO_Port, seguimento_G10_Pin, 0);
 800064e:	4bd6      	ldr	r3, [pc, #856]	; (80009a8 <main+0x78c>)
 8000650:	2200      	movs	r2, #0
 8000652:	2120      	movs	r1, #32
 8000654:	0018      	movs	r0, r3
 8000656:	f000 fe42 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  break;
 800065a:	e1a4      	b.n	80009a6 <main+0x78a>

	 	  case 8:
	 		  HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 1);
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	01db      	lsls	r3, r3, #7
 8000660:	48d1      	ldr	r0, [pc, #836]	; (80009a8 <main+0x78c>)
 8000662:	2201      	movs	r2, #1
 8000664:	0019      	movs	r1, r3
 8000666:	f000 fe3a 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 1);
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	0059      	lsls	r1, r3, #1
 800066e:	23a0      	movs	r3, #160	; 0xa0
 8000670:	05db      	lsls	r3, r3, #23
 8000672:	2201      	movs	r2, #1
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fe32 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 1);
 800067a:	4bcb      	ldr	r3, [pc, #812]	; (80009a8 <main+0x78c>)
 800067c:	2201      	movs	r2, #1
 800067e:	2110      	movs	r1, #16
 8000680:	0018      	movs	r0, r3
 8000682:	f000 fe2c 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 1);
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	0099      	lsls	r1, r3, #2
 800068a:	23a0      	movs	r3, #160	; 0xa0
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	2201      	movs	r2, #1
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fe24 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 1);
 8000696:	4bc5      	ldr	r3, [pc, #788]	; (80009ac <main+0x790>)
 8000698:	2201      	movs	r2, #1
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fe1e 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 1);
 80006a2:	4bc1      	ldr	r3, [pc, #772]	; (80009a8 <main+0x78c>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	2108      	movs	r1, #8
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fe18 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 1);
 80006ae:	4bbe      	ldr	r3, [pc, #760]	; (80009a8 <main+0x78c>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	2101      	movs	r1, #1
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fe12 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_G10_GPIO_Port, seguimento_G10_Pin, 1);
 80006ba:	4bbb      	ldr	r3, [pc, #748]	; (80009a8 <main+0x78c>)
 80006bc:	2201      	movs	r2, #1
 80006be:	2120      	movs	r1, #32
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fe0c 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  break;
 80006c6:	e16e      	b.n	80009a6 <main+0x78a>

	 	  case 9:
	 		  HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 0);
 80006c8:	4bb8      	ldr	r3, [pc, #736]	; (80009ac <main+0x790>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 fe05 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 1);
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	01db      	lsls	r3, r3, #7
 80006d8:	48b3      	ldr	r0, [pc, #716]	; (80009a8 <main+0x78c>)
 80006da:	2201      	movs	r2, #1
 80006dc:	0019      	movs	r1, r3
 80006de:	f000 fdfe 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 1);
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	0059      	lsls	r1, r3, #1
 80006e6:	23a0      	movs	r3, #160	; 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	2201      	movs	r2, #1
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fdf6 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 1);
 80006f2:	4bad      	ldr	r3, [pc, #692]	; (80009a8 <main+0x78c>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	2110      	movs	r1, #16
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 fdf0 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 1);
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	0099      	lsls	r1, r3, #2
 8000702:	23a0      	movs	r3, #160	; 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	2201      	movs	r2, #1
 8000708:	0018      	movs	r0, r3
 800070a:	f000 fde8 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 1);
 800070e:	4ba6      	ldr	r3, [pc, #664]	; (80009a8 <main+0x78c>)
 8000710:	2201      	movs	r2, #1
 8000712:	2108      	movs	r1, #8
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fde2 	bl	80012de <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 1);
 800071a:	4ba3      	ldr	r3, [pc, #652]	; (80009a8 <main+0x78c>)
 800071c:	2201      	movs	r2, #1
 800071e:	2101      	movs	r1, #1
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fddc 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  break;
 8000726:	e13e      	b.n	80009a6 <main+0x78a>



	      case 10:
		       HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 1);
 8000728:	4ba0      	ldr	r3, [pc, #640]	; (80009ac <main+0x790>)
 800072a:	2201      	movs	r2, #1
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fdd5 	bl	80012de <HAL_GPIO_WritePin>
		       HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 0);
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	0099      	lsls	r1, r3, #2
 8000738:	23a0      	movs	r3, #160	; 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	2200      	movs	r2, #0
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fdcd 	bl	80012de <HAL_GPIO_WritePin>
		 	   HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 1);
 8000744:	4b98      	ldr	r3, [pc, #608]	; (80009a8 <main+0x78c>)
 8000746:	2201      	movs	r2, #1
 8000748:	2110      	movs	r1, #16
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fdc7 	bl	80012de <HAL_GPIO_WritePin>
		 	   HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 1);
 8000750:	4b95      	ldr	r3, [pc, #596]	; (80009a8 <main+0x78c>)
 8000752:	2201      	movs	r2, #1
 8000754:	2101      	movs	r1, #1
 8000756:	0018      	movs	r0, r3
 8000758:	f000 fdc1 	bl	80012de <HAL_GPIO_WritePin>
		 	   HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 1);
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	0059      	lsls	r1, r3, #1
 8000760:	23a0      	movs	r3, #160	; 0xa0
 8000762:	05db      	lsls	r3, r3, #23
 8000764:	2201      	movs	r2, #1
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fdb9 	bl	80012de <HAL_GPIO_WritePin>
		 	   HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 1);
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	01db      	lsls	r3, r3, #7
 8000770:	488d      	ldr	r0, [pc, #564]	; (80009a8 <main+0x78c>)
 8000772:	2201      	movs	r2, #1
 8000774:	0019      	movs	r1, r3
 8000776:	f000 fdb2 	bl	80012de <HAL_GPIO_WritePin>
		 	   HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 1);
 800077a:	4b8b      	ldr	r3, [pc, #556]	; (80009a8 <main+0x78c>)
 800077c:	2201      	movs	r2, #1
 800077e:	2108      	movs	r1, #8
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fdac 	bl	80012de <HAL_GPIO_WritePin>


		  break;
 8000786:	e10e      	b.n	80009a6 <main+0x78a>
	      case 11:
		       HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 1);
 8000788:	4b88      	ldr	r3, [pc, #544]	; (80009ac <main+0x790>)
 800078a:	2201      	movs	r2, #1
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fda5 	bl	80012de <HAL_GPIO_WritePin>
		 	   HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 1);
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	0099      	lsls	r1, r3, #2
 8000798:	23a0      	movs	r3, #160	; 0xa0
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	2201      	movs	r2, #1
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 fd9d 	bl	80012de <HAL_GPIO_WritePin>
		 	   HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 1);
 80007a4:	4b80      	ldr	r3, [pc, #512]	; (80009a8 <main+0x78c>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	2110      	movs	r1, #16
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 fd97 	bl	80012de <HAL_GPIO_WritePin>
		 	   HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 1);
 80007b0:	4b7d      	ldr	r3, [pc, #500]	; (80009a8 <main+0x78c>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	2101      	movs	r1, #1
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fd91 	bl	80012de <HAL_GPIO_WritePin>
		 	   HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 1);
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	0059      	lsls	r1, r3, #1
 80007c0:	23a0      	movs	r3, #160	; 0xa0
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	2201      	movs	r2, #1
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fd89 	bl	80012de <HAL_GPIO_WritePin>
		 	   HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 1);
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	01db      	lsls	r3, r3, #7
 80007d0:	4875      	ldr	r0, [pc, #468]	; (80009a8 <main+0x78c>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	0019      	movs	r1, r3
 80007d6:	f000 fd82 	bl	80012de <HAL_GPIO_WritePin>
		 	   HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 1);
 80007da:	4b73      	ldr	r3, [pc, #460]	; (80009a8 <main+0x78c>)
 80007dc:	2201      	movs	r2, #1
 80007de:	2108      	movs	r1, #8
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 fd7c 	bl	80012de <HAL_GPIO_WritePin>
		 	   HAL_GPIO_WritePin(seguimento_G10_GPIO_Port, seguimento_G10_Pin, 1);
 80007e6:	4b70      	ldr	r3, [pc, #448]	; (80009a8 <main+0x78c>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	2120      	movs	r1, #32
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fd76 	bl	80012de <HAL_GPIO_WritePin>
		  break;
 80007f2:	e0d8      	b.n	80009a6 <main+0x78a>


	      case 12:
	          HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 1);
 80007f4:	4b6d      	ldr	r3, [pc, #436]	; (80009ac <main+0x790>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 fd6f 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 1);
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	0099      	lsls	r1, r3, #2
 8000804:	23a0      	movs	r3, #160	; 0xa0
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	2201      	movs	r2, #1
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fd67 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 1);
 8000810:	4b65      	ldr	r3, [pc, #404]	; (80009a8 <main+0x78c>)
 8000812:	2201      	movs	r2, #1
 8000814:	2110      	movs	r1, #16
 8000816:	0018      	movs	r0, r3
 8000818:	f000 fd61 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 1);
 800081c:	4b62      	ldr	r3, [pc, #392]	; (80009a8 <main+0x78c>)
 800081e:	2201      	movs	r2, #1
 8000820:	2101      	movs	r1, #1
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fd5b 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 0);
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	0059      	lsls	r1, r3, #1
 800082c:	23a0      	movs	r3, #160	; 0xa0
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	2200      	movs	r2, #0
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fd53 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 1);
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	01db      	lsls	r3, r3, #7
 800083c:	485a      	ldr	r0, [pc, #360]	; (80009a8 <main+0x78c>)
 800083e:	2201      	movs	r2, #1
 8000840:	0019      	movs	r1, r3
 8000842:	f000 fd4c 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 1);
 8000846:	4b58      	ldr	r3, [pc, #352]	; (80009a8 <main+0x78c>)
 8000848:	2201      	movs	r2, #1
 800084a:	2108      	movs	r1, #8
 800084c:	0018      	movs	r0, r3
 800084e:	f000 fd46 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(seguimento_G10_GPIO_Port, seguimento_G10_Pin, 0);
 8000852:	4b55      	ldr	r3, [pc, #340]	; (80009a8 <main+0x78c>)
 8000854:	2200      	movs	r2, #0
 8000856:	2120      	movs	r1, #32
 8000858:	0018      	movs	r0, r3
 800085a:	f000 fd40 	bl	80012de <HAL_GPIO_WritePin>
	 	 break;
 800085e:	e0a2      	b.n	80009a6 <main+0x78a>

	     case 13:
	          HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 1);
 8000860:	4b52      	ldr	r3, [pc, #328]	; (80009ac <main+0x790>)
 8000862:	2201      	movs	r2, #1
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fd39 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 1);
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	0099      	lsls	r1, r3, #2
 8000870:	23a0      	movs	r3, #160	; 0xa0
 8000872:	05db      	lsls	r3, r3, #23
 8000874:	2201      	movs	r2, #1
 8000876:	0018      	movs	r0, r3
 8000878:	f000 fd31 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 0);
 800087c:	4b4a      	ldr	r3, [pc, #296]	; (80009a8 <main+0x78c>)
 800087e:	2200      	movs	r2, #0
 8000880:	2110      	movs	r1, #16
 8000882:	0018      	movs	r0, r3
 8000884:	f000 fd2b 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 1);
 8000888:	4b47      	ldr	r3, [pc, #284]	; (80009a8 <main+0x78c>)
 800088a:	2201      	movs	r2, #1
 800088c:	2101      	movs	r1, #1
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fd25 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 0);
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	0059      	lsls	r1, r3, #1
 8000898:	23a0      	movs	r3, #160	; 0xa0
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	2200      	movs	r2, #0
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fd1d 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 1);
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	01db      	lsls	r3, r3, #7
 80008a8:	483f      	ldr	r0, [pc, #252]	; (80009a8 <main+0x78c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	0019      	movs	r1, r3
 80008ae:	f000 fd16 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 1);
 80008b2:	4b3d      	ldr	r3, [pc, #244]	; (80009a8 <main+0x78c>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	2108      	movs	r1, #8
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 fd10 	bl	80012de <HAL_GPIO_WritePin>
	 	  	  HAL_GPIO_WritePin(seguimento_G10_GPIO_Port, seguimento_G10_Pin, 0);
 80008be:	4b3a      	ldr	r3, [pc, #232]	; (80009a8 <main+0x78c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	2120      	movs	r1, #32
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 fd0a 	bl	80012de <HAL_GPIO_WritePin>

	 	 break;
 80008ca:	e06c      	b.n	80009a6 <main+0x78a>

	     case 14:
		      HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 1);
 80008cc:	4b37      	ldr	r3, [pc, #220]	; (80009ac <main+0x790>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	0018      	movs	r0, r3
 80008d4:	f000 fd03 	bl	80012de <HAL_GPIO_WritePin>
		 	  HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 1);
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	0099      	lsls	r1, r3, #2
 80008dc:	23a0      	movs	r3, #160	; 0xa0
 80008de:	05db      	lsls	r3, r3, #23
 80008e0:	2201      	movs	r2, #1
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 fcfb 	bl	80012de <HAL_GPIO_WritePin>
		 	  HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 1);
 80008e8:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <main+0x78c>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	2110      	movs	r1, #16
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fcf5 	bl	80012de <HAL_GPIO_WritePin>
		 	  HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 1);
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <main+0x78c>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	2101      	movs	r1, #1
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fcef 	bl	80012de <HAL_GPIO_WritePin>
		 	  HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 1);
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	0059      	lsls	r1, r3, #1
 8000904:	23a0      	movs	r3, #160	; 0xa0
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	2201      	movs	r2, #1
 800090a:	0018      	movs	r0, r3
 800090c:	f000 fce7 	bl	80012de <HAL_GPIO_WritePin>
		 	  HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 1);
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	01db      	lsls	r3, r3, #7
 8000914:	4824      	ldr	r0, [pc, #144]	; (80009a8 <main+0x78c>)
 8000916:	2201      	movs	r2, #1
 8000918:	0019      	movs	r1, r3
 800091a:	f000 fce0 	bl	80012de <HAL_GPIO_WritePin>
		 	  HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 1);
 800091e:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <main+0x78c>)
 8000920:	2201      	movs	r2, #1
 8000922:	2108      	movs	r1, #8
 8000924:	0018      	movs	r0, r3
 8000926:	f000 fcda 	bl	80012de <HAL_GPIO_WritePin>
		 	  HAL_GPIO_WritePin(seguimento_G10_GPIO_Port, seguimento_G10_Pin, 0);
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <main+0x78c>)
 800092c:	2200      	movs	r2, #0
 800092e:	2120      	movs	r1, #32
 8000930:	0018      	movs	r0, r3
 8000932:	f000 fcd4 	bl	80012de <HAL_GPIO_WritePin>
	 	  break;
 8000936:	e036      	b.n	80009a6 <main+0x78a>

          case 15:
    	       HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, 1);
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <main+0x790>)
 800093a:	2201      	movs	r2, #1
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fccd 	bl	80012de <HAL_GPIO_WritePin>
    	  	   HAL_GPIO_WritePin(seguimento_D2_GPIO_Port, seguimento_D2_Pin, 0);
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	0099      	lsls	r1, r3, #2
 8000948:	23a0      	movs	r3, #160	; 0xa0
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	2200      	movs	r2, #0
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fcc5 	bl	80012de <HAL_GPIO_WritePin>
    	  	   HAL_GPIO_WritePin(seguimento_C4_GPIO_Port, seguimento_C4_Pin, 0);
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <main+0x78c>)
 8000956:	2200      	movs	r2, #0
 8000958:	2110      	movs	r1, #16
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fcbf 	bl	80012de <HAL_GPIO_WritePin>
    	  	   HAL_GPIO_WritePin(seguimento_DP5_GPIO_Port, seguimento_DP5_Pin, 0);
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <main+0x78c>)
 8000962:	2200      	movs	r2, #0
 8000964:	2101      	movs	r1, #1
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fcb9 	bl	80012de <HAL_GPIO_WritePin>
    	  	   HAL_GPIO_WritePin(seguimento_B6_GPIO_Port, seguimento_B6_Pin, 0);
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	0059      	lsls	r1, r3, #1
 8000970:	23a0      	movs	r3, #160	; 0xa0
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	2200      	movs	r2, #0
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fcb1 	bl	80012de <HAL_GPIO_WritePin>
    	  	   HAL_GPIO_WritePin(seguimento_7A_GPIO_Port, seguimento_7A_Pin, 1);
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	01db      	lsls	r3, r3, #7
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <main+0x78c>)
 8000982:	2201      	movs	r2, #1
 8000984:	0019      	movs	r1, r3
 8000986:	f000 fcaa 	bl	80012de <HAL_GPIO_WritePin>
    	  	   HAL_GPIO_WritePin(seguimento_9F_GPIO_Port, seguimento_9F_Pin, 1);
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <main+0x78c>)
 800098c:	2201      	movs	r2, #1
 800098e:	2108      	movs	r1, #8
 8000990:	0018      	movs	r0, r3
 8000992:	f000 fca4 	bl	80012de <HAL_GPIO_WritePin>
    	  	   HAL_GPIO_WritePin(seguimento_G10_GPIO_Port, seguimento_G10_Pin, 1);
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <main+0x78c>)
 8000998:	2201      	movs	r2, #1
 800099a:	2120      	movs	r1, #32
 800099c:	0018      	movs	r0, r3
 800099e:	f000 fc9e 	bl	80012de <HAL_GPIO_WritePin>
    	  break;
 80009a2:	e000      	b.n	80009a6 <main+0x78a>


        default:
	    break ;
 80009a4:	46c0      	nop			; (mov r8, r8)
	  d_1 = HAL_GPIO_ReadPin(dip_1_GPIO_Port, dip_1_Pin)*8;
 80009a6:	e444      	b.n	8000232 <main+0x16>
 80009a8:	50000400 	.word	0x50000400
 80009ac:	50000800 	.word	0x50000800

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b095      	sub	sp, #84	; 0x54
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	2414      	movs	r4, #20
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	0018      	movs	r0, r3
 80009bc:	233c      	movs	r3, #60	; 0x3c
 80009be:	001a      	movs	r2, r3
 80009c0:	2100      	movs	r1, #0
 80009c2:	f001 f9fd 	bl	8001dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	0018      	movs	r0, r3
 80009ca:	2310      	movs	r3, #16
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f001 f9f6 	bl	8001dc0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	0018      	movs	r0, r3
 80009da:	f000 fc9d 	bl	8001318 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	2202      	movs	r2, #2
 80009e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	0052      	lsls	r2, r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009ec:	0021      	movs	r1, r4
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2240      	movs	r2, #64	; 0x40
 80009f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2202      	movs	r2, #2
 80009fe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2202      	movs	r2, #2
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2208      	movs	r2, #8
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2280      	movs	r2, #128	; 0x80
 8000a16:	0292      	lsls	r2, r2, #10
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	0492      	lsls	r2, r2, #18
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	0592      	lsls	r2, r2, #22
 8000a28:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f000 fcb3 	bl	8001398 <HAL_RCC_OscConfig>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a36:	f000 f905 	bl	8000c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2202      	movs	r2, #2
 8000a44:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2102      	movs	r1, #2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f001 f804 	bl	8001a64 <HAL_RCC_ClockConfig>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a60:	f000 f8f0 	bl	8000c44 <Error_Handler>
  }
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b015      	add	sp, #84	; 0x54
 8000a6a:	bd90      	pop	{r4, r7, pc}

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b08b      	sub	sp, #44	; 0x2c
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	2414      	movs	r4, #20
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	0018      	movs	r0, r3
 8000a78:	2314      	movs	r3, #20
 8000a7a:	001a      	movs	r2, r3
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	f001 f99f 	bl	8001dc0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b6b      	ldr	r3, [pc, #428]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	4b6a      	ldr	r3, [pc, #424]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000a88:	2104      	movs	r1, #4
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8e:	4b68      	ldr	r3, [pc, #416]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	2204      	movs	r2, #4
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b65      	ldr	r3, [pc, #404]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9e:	4b64      	ldr	r3, [pc, #400]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa6:	4b62      	ldr	r3, [pc, #392]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b5f      	ldr	r3, [pc, #380]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ab6:	4b5e      	ldr	r3, [pc, #376]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000ab8:	2102      	movs	r1, #2
 8000aba:	430a      	orrs	r2, r1
 8000abc:	635a      	str	r2, [r3, #52]	; 0x34
 8000abe:	4b5c      	ldr	r3, [pc, #368]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b59      	ldr	r3, [pc, #356]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ace:	4b58      	ldr	r3, [pc, #352]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ad6:	4b56      	ldr	r3, [pc, #344]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	2208      	movs	r2, #8
 8000adc:	4013      	ands	r3, r2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD4_Pin|seguimento_B6_Pin|seguimento_D2_Pin, GPIO_PIN_RESET);
 8000ae2:	23c8      	movs	r3, #200	; 0xc8
 8000ae4:	0099      	lsls	r1, r3, #2
 8000ae6:	23a0      	movs	r3, #160	; 0xa0
 8000ae8:	05db      	lsls	r3, r3, #23
 8000aea:	2200      	movs	r2, #0
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 fbf6 	bl	80012de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, seguimento_DP5_Pin|seguimento_7A_Pin|seguimento_9F_Pin|seguimento_C4_Pin
 8000af2:	4950      	ldr	r1, [pc, #320]	; (8000c34 <MX_GPIO_Init+0x1c8>)
 8000af4:	4b50      	ldr	r3, [pc, #320]	; (8000c38 <MX_GPIO_Init+0x1cc>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	0018      	movs	r0, r3
 8000afa:	f000 fbf0 	bl	80012de <HAL_GPIO_WritePin>
                          |seguimento_G10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(seguimento_E1_GPIO_Port, seguimento_E1_Pin, GPIO_PIN_RESET);
 8000afe:	4b4f      	ldr	r3, [pc, #316]	; (8000c3c <MX_GPIO_Init+0x1d0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 fbea 	bl	80012de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	0192      	lsls	r2, r2, #6
 8000b10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	4a46      	ldr	r2, [pc, #280]	; (8000c3c <MX_GPIO_Init+0x1d0>)
 8000b22:	0019      	movs	r1, r3
 8000b24:	0010      	movs	r0, r2
 8000b26:	f000 fa51 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : dip_3_Pin */
  GPIO_InitStruct.Pin = dip_3_Pin;
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	2208      	movs	r2, #8
 8000b2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(dip_3_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	193a      	adds	r2, r7, r4
 8000b3e:	23a0      	movs	r3, #160	; 0xa0
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	0011      	movs	r1, r2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f000 fa41 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2220      	movs	r2, #32
 8000b4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2201      	movs	r2, #1
 8000b54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	2203      	movs	r2, #3
 8000b60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000b62:	193a      	adds	r2, r7, r4
 8000b64:	23a0      	movs	r3, #160	; 0xa0
 8000b66:	05db      	lsls	r3, r3, #23
 8000b68:	0011      	movs	r1, r2
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 fa2e 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : seguimento_DP5_Pin seguimento_7A_Pin seguimento_9F_Pin seguimento_C4_Pin
                           seguimento_G10_Pin */
  GPIO_InitStruct.Pin = seguimento_DP5_Pin|seguimento_7A_Pin|seguimento_9F_Pin|seguimento_C4_Pin
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	4a30      	ldr	r2, [pc, #192]	; (8000c34 <MX_GPIO_Init+0x1c8>)
 8000b74:	601a      	str	r2, [r3, #0]
                          |seguimento_G10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	2201      	movs	r2, #1
 8000b7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	4a2b      	ldr	r2, [pc, #172]	; (8000c38 <MX_GPIO_Init+0x1cc>)
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	0010      	movs	r0, r2
 8000b90:	f000 fa1c 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : seguimento_B6_Pin seguimento_D2_Pin */
  GPIO_InitStruct.Pin = seguimento_B6_Pin|seguimento_D2_Pin;
 8000b94:	0021      	movs	r1, r4
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	22c0      	movs	r2, #192	; 0xc0
 8000b9a:	0092      	lsls	r2, r2, #2
 8000b9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	000c      	movs	r4, r1
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	193a      	adds	r2, r7, r4
 8000bb4:	23a0      	movs	r3, #160	; 0xa0
 8000bb6:	05db      	lsls	r3, r3, #23
 8000bb8:	0011      	movs	r1, r2
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 fa06 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : dip_2_Pin dip_1_Pin */
  GPIO_InitStruct.Pin = dip_2_Pin|dip_1_Pin;
 8000bc0:	0021      	movs	r1, r4
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	22a0      	movs	r2, #160	; 0xa0
 8000bc6:	0052      	lsls	r2, r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	000c      	movs	r4, r1
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <MX_GPIO_Init+0x1d0>)
 8000bdc:	0019      	movs	r1, r3
 8000bde:	0010      	movs	r0, r2
 8000be0:	f000 f9f4 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : seguimento_E1_Pin */
  GPIO_InitStruct.Pin = seguimento_E1_Pin;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2201      	movs	r2, #1
 8000bee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(seguimento_E1_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <MX_GPIO_Init+0x1d0>)
 8000c00:	0019      	movs	r1, r3
 8000c02:	0010      	movs	r0, r2
 8000c04:	f000 f9e2 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : dip_4_Pin */
  GPIO_InitStruct.Pin = dip_4_Pin;
 8000c08:	0021      	movs	r1, r4
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2240      	movs	r2, #64	; 0x40
 8000c0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2201      	movs	r2, #1
 8000c1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(dip_4_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <MX_GPIO_Init+0x1d4>)
 8000c20:	0019      	movs	r1, r3
 8000c22:	0010      	movs	r0, r2
 8000c24:	f000 f9d2 	bl	8000fcc <HAL_GPIO_Init>

}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b00b      	add	sp, #44	; 0x2c
 8000c2e:	bd90      	pop	{r4, r7, pc}
 8000c30:	40021000 	.word	0x40021000
 8000c34:	00004039 	.word	0x00004039
 8000c38:	50000400 	.word	0x50000400
 8000c3c:	50000800 	.word	0x50000800
 8000c40:	50000c00 	.word	0x50000c00

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	641a      	str	r2, [r3, #64]	; 0x40
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	2201      	movs	r2, #1
 8000c68:	4013      	ands	r3, r2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	0549      	lsls	r1, r1, #21
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	055b      	lsls	r3, r3, #21
 8000c84:	4013      	ands	r3, r2
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000c8a:	23c0      	movs	r3, #192	; 0xc0
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 f8d2 	bl	8000e38 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc4:	f000 f89c 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cdc:	f7ff fff7 	bl	8000cce <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	; (8000d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <LoopForever+0xe>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	; (8000d24 <LoopForever+0x16>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d06:	f001 f837 	bl	8001d78 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d0a:	f7ff fa87 	bl	800021c <main>

08000d0e <LoopForever>:

LoopForever:
  b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   r0, =_estack
 8000d10:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d1c:	08001e70 	.word	0x08001e70
  ldr r2, =_sbss
 8000d20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d24:	20000038 	.word	0x20000038

08000d28 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_COMP_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_Init+0x3c>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_Init+0x3c>)
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	0049      	lsls	r1, r1, #1
 8000d42:	430a      	orrs	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d46:	2003      	movs	r0, #3
 8000d48:	f000 f810 	bl	8000d6c <HAL_InitTick>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	e001      	b.n	8000d5c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff ff7a 	bl	8000c50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	781b      	ldrb	r3, [r3, #0]
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40022000 	.word	0x40022000

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d74:	230f      	movs	r3, #15
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_InitTick+0x88>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d02b      	beq.n	8000ddc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HAL_InitTick+0x8c>)
 8000d86:	681c      	ldr	r4, [r3, #0]
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <HAL_InitTick+0x88>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	0019      	movs	r1, r3
 8000d8e:	23fa      	movs	r3, #250	; 0xfa
 8000d90:	0098      	lsls	r0, r3, #2
 8000d92:	f7ff f9b7 	bl	8000104 <__udivsi3>
 8000d96:	0003      	movs	r3, r0
 8000d98:	0019      	movs	r1, r3
 8000d9a:	0020      	movs	r0, r4
 8000d9c:	f7ff f9b2 	bl	8000104 <__udivsi3>
 8000da0:	0003      	movs	r3, r0
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 f905 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d112      	bne.n	8000dd2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d80a      	bhi.n	8000dc8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	2301      	movs	r3, #1
 8000db6:	425b      	negs	r3, r3
 8000db8:	2200      	movs	r2, #0
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f000 f8e4 	bl	8000f88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_InitTick+0x90>)
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	e00d      	b.n	8000de4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e008      	b.n	8000de4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e003      	b.n	8000de4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ddc:	230f      	movs	r3, #15
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000de4:	230f      	movs	r3, #15
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	781b      	ldrb	r3, [r3, #0]
}
 8000dea:	0018      	movs	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b005      	add	sp, #20
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_IncTick+0x1c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	001a      	movs	r2, r3
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_IncTick+0x20>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	18d2      	adds	r2, r2, r3
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_IncTick+0x20>)
 8000e12:	601a      	str	r2, [r3, #0]
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000034 	.word	0x20000034

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b02      	ldr	r3, [pc, #8]	; (8000e34 <HAL_GetTick+0x10>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	20000034 	.word	0x20000034

08000e38 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000e46:	4013      	ands	r3, r2
 8000e48:	0019      	movs	r1, r3
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	40010000 	.word	0x40010000
 8000e60:	fffff9ff 	.word	0xfffff9ff

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b7f      	cmp	r3, #127	; 0x7f
 8000e78:	d828      	bhi.n	8000ecc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e7a:	4a2f      	ldr	r2, [pc, #188]	; (8000f38 <__NVIC_SetPriority+0xd4>)
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	33c0      	adds	r3, #192	; 0xc0
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	589b      	ldr	r3, [r3, r2]
 8000e8a:	1dfa      	adds	r2, r7, #7
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	0011      	movs	r1, r2
 8000e90:	2203      	movs	r2, #3
 8000e92:	400a      	ands	r2, r1
 8000e94:	00d2      	lsls	r2, r2, #3
 8000e96:	21ff      	movs	r1, #255	; 0xff
 8000e98:	4091      	lsls	r1, r2
 8000e9a:	000a      	movs	r2, r1
 8000e9c:	43d2      	mvns	r2, r2
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	019b      	lsls	r3, r3, #6
 8000ea6:	22ff      	movs	r2, #255	; 0xff
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	0018      	movs	r0, r3
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	4003      	ands	r3, r0
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb8:	481f      	ldr	r0, [pc, #124]	; (8000f38 <__NVIC_SetPriority+0xd4>)
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	33c0      	adds	r3, #192	; 0xc0
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eca:	e031      	b.n	8000f30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <__NVIC_SetPriority+0xd8>)
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	400b      	ands	r3, r1
 8000ed8:	3b08      	subs	r3, #8
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3306      	adds	r3, #6
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	18d3      	adds	r3, r2, r3
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	1dfa      	adds	r2, r7, #7
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	0011      	movs	r1, r2
 8000eec:	2203      	movs	r2, #3
 8000eee:	400a      	ands	r2, r1
 8000ef0:	00d2      	lsls	r2, r2, #3
 8000ef2:	21ff      	movs	r1, #255	; 0xff
 8000ef4:	4091      	lsls	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	43d2      	mvns	r2, r2
 8000efa:	401a      	ands	r2, r3
 8000efc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	019b      	lsls	r3, r3, #6
 8000f02:	22ff      	movs	r2, #255	; 0xff
 8000f04:	401a      	ands	r2, r3
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	4003      	ands	r3, r0
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <__NVIC_SetPriority+0xd8>)
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	001c      	movs	r4, r3
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	4023      	ands	r3, r4
 8000f20:	3b08      	subs	r3, #8
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	430a      	orrs	r2, r1
 8000f26:	3306      	adds	r3, #6
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	18c3      	adds	r3, r0, r3
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	601a      	str	r2, [r3, #0]
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b003      	add	sp, #12
 8000f36:	bd90      	pop	{r4, r7, pc}
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	1e5a      	subs	r2, r3, #1
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	045b      	lsls	r3, r3, #17
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d301      	bcc.n	8000f58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f54:	2301      	movs	r3, #1
 8000f56:	e010      	b.n	8000f7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <SysTick_Config+0x44>)
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	3a01      	subs	r2, #1
 8000f5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f60:	2301      	movs	r3, #1
 8000f62:	425b      	negs	r3, r3
 8000f64:	2103      	movs	r1, #3
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff ff7c 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x44>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x44>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	210f      	movs	r1, #15
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	1c02      	adds	r2, r0, #0
 8000f98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b004      	add	sp, #16
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff ffbf 	bl	8000f40 <SysTick_Config>
 8000fc2:	0003      	movs	r3, r0
}
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b002      	add	sp, #8
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fda:	e14d      	b.n	8001278 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4091      	lsls	r1, r2
 8000fe6:	000a      	movs	r2, r1
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d100      	bne.n	8000ff4 <HAL_GPIO_Init+0x28>
 8000ff2:	e13e      	b.n	8001272 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d005      	beq.n	800100c <HAL_GPIO_Init+0x40>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2203      	movs	r2, #3
 8001006:	4013      	ands	r3, r2
 8001008:	2b02      	cmp	r3, #2
 800100a:	d130      	bne.n	800106e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	409a      	lsls	r2, r3
 800101a:	0013      	movs	r3, r2
 800101c:	43da      	mvns	r2, r3
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	409a      	lsls	r2, r3
 800102e:	0013      	movs	r3, r2
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001042:	2201      	movs	r2, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
 8001048:	0013      	movs	r3, r2
 800104a:	43da      	mvns	r2, r3
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	091b      	lsrs	r3, r3, #4
 8001058:	2201      	movs	r2, #1
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
 8001060:	0013      	movs	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2203      	movs	r2, #3
 8001074:	4013      	ands	r3, r2
 8001076:	2b03      	cmp	r3, #3
 8001078:	d017      	beq.n	80010aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	43da      	mvns	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	409a      	lsls	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2203      	movs	r2, #3
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d123      	bne.n	80010fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	58d3      	ldr	r3, [r2, r3]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2207      	movs	r2, #7
 80010c8:	4013      	ands	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	43da      	mvns	r2, r3
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2107      	movs	r1, #7
 80010e2:	400b      	ands	r3, r1
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	409a      	lsls	r2, r3
 80010e8:	0013      	movs	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	6939      	ldr	r1, [r7, #16]
 80010fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	43da      	mvns	r2, r3
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2203      	movs	r2, #3
 800111c:	401a      	ands	r2, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	23c0      	movs	r3, #192	; 0xc0
 8001138:	029b      	lsls	r3, r3, #10
 800113a:	4013      	ands	r3, r2
 800113c:	d100      	bne.n	8001140 <HAL_GPIO_Init+0x174>
 800113e:	e098      	b.n	8001272 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001140:	4a53      	ldr	r2, [pc, #332]	; (8001290 <HAL_GPIO_Init+0x2c4>)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3318      	adds	r3, #24
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	589b      	ldr	r3, [r3, r2]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2203      	movs	r2, #3
 8001152:	4013      	ands	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	220f      	movs	r2, #15
 8001158:	409a      	lsls	r2, r3
 800115a:	0013      	movs	r3, r2
 800115c:	43da      	mvns	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	23a0      	movs	r3, #160	; 0xa0
 8001168:	05db      	lsls	r3, r3, #23
 800116a:	429a      	cmp	r2, r3
 800116c:	d019      	beq.n	80011a2 <HAL_GPIO_Init+0x1d6>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a48      	ldr	r2, [pc, #288]	; (8001294 <HAL_GPIO_Init+0x2c8>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d013      	beq.n	800119e <HAL_GPIO_Init+0x1d2>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a47      	ldr	r2, [pc, #284]	; (8001298 <HAL_GPIO_Init+0x2cc>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d00d      	beq.n	800119a <HAL_GPIO_Init+0x1ce>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a46      	ldr	r2, [pc, #280]	; (800129c <HAL_GPIO_Init+0x2d0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d007      	beq.n	8001196 <HAL_GPIO_Init+0x1ca>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a45      	ldr	r2, [pc, #276]	; (80012a0 <HAL_GPIO_Init+0x2d4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d101      	bne.n	8001192 <HAL_GPIO_Init+0x1c6>
 800118e:	2304      	movs	r3, #4
 8001190:	e008      	b.n	80011a4 <HAL_GPIO_Init+0x1d8>
 8001192:	2305      	movs	r3, #5
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x1d8>
 8001196:	2303      	movs	r3, #3
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x1d8>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x1d8>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x1d8>
 80011a2:	2300      	movs	r3, #0
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	2103      	movs	r1, #3
 80011a8:	400a      	ands	r2, r1
 80011aa:	00d2      	lsls	r2, r2, #3
 80011ac:	4093      	lsls	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80011b4:	4936      	ldr	r1, [pc, #216]	; (8001290 <HAL_GPIO_Init+0x2c4>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3318      	adds	r3, #24
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011c2:	4a33      	ldr	r2, [pc, #204]	; (8001290 <HAL_GPIO_Init+0x2c4>)
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	58d3      	ldr	r3, [r2, r3]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43da      	mvns	r2, r3
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	025b      	lsls	r3, r3, #9
 80011dc:	4013      	ands	r3, r2
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e8:	4929      	ldr	r1, [pc, #164]	; (8001290 <HAL_GPIO_Init+0x2c4>)
 80011ea:	2280      	movs	r2, #128	; 0x80
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80011f0:	4a27      	ldr	r2, [pc, #156]	; (8001290 <HAL_GPIO_Init+0x2c4>)
 80011f2:	2384      	movs	r3, #132	; 0x84
 80011f4:	58d3      	ldr	r3, [r2, r3]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	029b      	lsls	r3, r3, #10
 800120a:	4013      	ands	r3, r2
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001216:	491e      	ldr	r1, [pc, #120]	; (8001290 <HAL_GPIO_Init+0x2c4>)
 8001218:	2284      	movs	r2, #132	; 0x84
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_GPIO_Init+0x2c4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43da      	mvns	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	035b      	lsls	r3, r3, #13
 8001236:	4013      	ands	r3, r2
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_GPIO_Init+0x2c4>)
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_GPIO_Init+0x2c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43da      	mvns	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	039b      	lsls	r3, r3, #14
 8001260:	4013      	ands	r3, r2
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_GPIO_Init+0x2c4>)
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	40da      	lsrs	r2, r3
 8001280:	1e13      	subs	r3, r2, #0
 8001282:	d000      	beq.n	8001286 <HAL_GPIO_Init+0x2ba>
 8001284:	e6aa      	b.n	8000fdc <HAL_GPIO_Init+0x10>
  }
}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b006      	add	sp, #24
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021800 	.word	0x40021800
 8001294:	50000400 	.word	0x50000400
 8001298:	50000800 	.word	0x50000800
 800129c:	50000c00 	.word	0x50000c00
 80012a0:	50001000 	.word	0x50001000

080012a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	000a      	movs	r2, r1
 80012ae:	1cbb      	adds	r3, r7, #2
 80012b0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	1cba      	adds	r2, r7, #2
 80012b8:	8812      	ldrh	r2, [r2, #0]
 80012ba:	4013      	ands	r3, r2
 80012bc:	d004      	beq.n	80012c8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80012be:	230f      	movs	r3, #15
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	e003      	b.n	80012d0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012c8:	230f      	movs	r3, #15
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80012d0:	230f      	movs	r3, #15
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	781b      	ldrb	r3, [r3, #0]
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b004      	add	sp, #16
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	0008      	movs	r0, r1
 80012e8:	0011      	movs	r1, r2
 80012ea:	1cbb      	adds	r3, r7, #2
 80012ec:	1c02      	adds	r2, r0, #0
 80012ee:	801a      	strh	r2, [r3, #0]
 80012f0:	1c7b      	adds	r3, r7, #1
 80012f2:	1c0a      	adds	r2, r1, #0
 80012f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f6:	1c7b      	adds	r3, r7, #1
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d004      	beq.n	8001308 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012fe:	1cbb      	adds	r3, r7, #2
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001306:	e003      	b.n	8001310 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001308:	1cbb      	adds	r3, r7, #2
 800130a:	881a      	ldrh	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b002      	add	sp, #8
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001326:	4013      	ands	r3, r2
 8001328:	0019      	movs	r1, r3
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	429a      	cmp	r2, r3
 800133a:	d11f      	bne.n	800137c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	0013      	movs	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	189b      	adds	r3, r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4912      	ldr	r1, [pc, #72]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800134a:	0018      	movs	r0, r3
 800134c:	f7fe feda 	bl	8000104 <__udivsi3>
 8001350:	0003      	movs	r3, r0
 8001352:	3301      	adds	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001356:	e008      	b.n	800136a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3b01      	subs	r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	e001      	b.n	800136a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e009      	b.n	800137e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	401a      	ands	r2, r3
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	429a      	cmp	r2, r3
 800137a:	d0ed      	beq.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	0018      	movs	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	b004      	add	sp, #16
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	40007000 	.word	0x40007000
 800138c:	fffff9ff 	.word	0xfffff9ff
 8001390:	20000000 	.word	0x20000000
 8001394:	000f4240 	.word	0x000f4240

08001398 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	f000 fb56 	bl	8001a58 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	4013      	ands	r3, r2
 80013b4:	d100      	bne.n	80013b8 <HAL_RCC_OscConfig+0x20>
 80013b6:	e07d      	b.n	80014b4 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b8:	4bc3      	ldr	r3, [pc, #780]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2238      	movs	r2, #56	; 0x38
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c2:	4bc1      	ldr	r3, [pc, #772]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2203      	movs	r2, #3
 80013c8:	4013      	ands	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b10      	cmp	r3, #16
 80013d0:	d102      	bne.n	80013d8 <HAL_RCC_OscConfig+0x40>
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d002      	beq.n	80013de <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013de:	4bba      	ldr	r3, [pc, #744]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	029b      	lsls	r3, r3, #10
 80013e6:	4013      	ands	r3, r2
 80013e8:	d063      	beq.n	80014b2 <HAL_RCC_OscConfig+0x11a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d15f      	bne.n	80014b2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	f000 fb30 	bl	8001a58 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	025b      	lsls	r3, r3, #9
 8001400:	429a      	cmp	r2, r3
 8001402:	d107      	bne.n	8001414 <HAL_RCC_OscConfig+0x7c>
 8001404:	4bb0      	ldr	r3, [pc, #704]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4baf      	ldr	r3, [pc, #700]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800140a:	2180      	movs	r1, #128	; 0x80
 800140c:	0249      	lsls	r1, r1, #9
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e020      	b.n	8001456 <HAL_RCC_OscConfig+0xbe>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	23a0      	movs	r3, #160	; 0xa0
 800141a:	02db      	lsls	r3, r3, #11
 800141c:	429a      	cmp	r2, r3
 800141e:	d10e      	bne.n	800143e <HAL_RCC_OscConfig+0xa6>
 8001420:	4ba9      	ldr	r3, [pc, #676]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4ba8      	ldr	r3, [pc, #672]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001426:	2180      	movs	r1, #128	; 0x80
 8001428:	02c9      	lsls	r1, r1, #11
 800142a:	430a      	orrs	r2, r1
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	4ba6      	ldr	r3, [pc, #664]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4ba5      	ldr	r3, [pc, #660]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	0249      	lsls	r1, r1, #9
 8001438:	430a      	orrs	r2, r1
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	e00b      	b.n	8001456 <HAL_RCC_OscConfig+0xbe>
 800143e:	4ba2      	ldr	r3, [pc, #648]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4ba1      	ldr	r3, [pc, #644]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001444:	49a1      	ldr	r1, [pc, #644]	; (80016cc <HAL_RCC_OscConfig+0x334>)
 8001446:	400a      	ands	r2, r1
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	4b9f      	ldr	r3, [pc, #636]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4b9e      	ldr	r3, [pc, #632]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001450:	499f      	ldr	r1, [pc, #636]	; (80016d0 <HAL_RCC_OscConfig+0x338>)
 8001452:	400a      	ands	r2, r1
 8001454:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d014      	beq.n	8001488 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145e:	f7ff fce1 	bl	8000e24 <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fcdc 	bl	8000e24 <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e2ee      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147a:	4b93      	ldr	r3, [pc, #588]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	029b      	lsls	r3, r3, #10
 8001482:	4013      	ands	r3, r2
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0xd0>
 8001486:	e015      	b.n	80014b4 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fccc 	bl	8000e24 <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001492:	f7ff fcc7 	bl	8000e24 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b64      	cmp	r3, #100	; 0x64
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e2d9      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014a4:	4b88      	ldr	r3, [pc, #544]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	029b      	lsls	r3, r3, #10
 80014ac:	4013      	ands	r3, r2
 80014ae:	d1f0      	bne.n	8001492 <HAL_RCC_OscConfig+0xfa>
 80014b0:	e000      	b.n	80014b4 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2202      	movs	r2, #2
 80014ba:	4013      	ands	r3, r2
 80014bc:	d100      	bne.n	80014c0 <HAL_RCC_OscConfig+0x128>
 80014be:	e099      	b.n	80015f4 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c0:	4b81      	ldr	r3, [pc, #516]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2238      	movs	r2, #56	; 0x38
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ca:	4b7f      	ldr	r3, [pc, #508]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2203      	movs	r2, #3
 80014d0:	4013      	ands	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b10      	cmp	r3, #16
 80014d8:	d102      	bne.n	80014e0 <HAL_RCC_OscConfig+0x148>
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d002      	beq.n	80014e6 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d135      	bne.n	8001552 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e6:	4b78      	ldr	r3, [pc, #480]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4013      	ands	r3, r2
 80014f0:	d005      	beq.n	80014fe <HAL_RCC_OscConfig+0x166>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e2ac      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b72      	ldr	r3, [pc, #456]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a74      	ldr	r2, [pc, #464]	; (80016d4 <HAL_RCC_OscConfig+0x33c>)
 8001504:	4013      	ands	r3, r2
 8001506:	0019      	movs	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	021a      	lsls	r2, r3, #8
 800150e:	4b6e      	ldr	r3, [pc, #440]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d112      	bne.n	8001540 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800151a:	4b6b      	ldr	r3, [pc, #428]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a6e      	ldr	r2, [pc, #440]	; (80016d8 <HAL_RCC_OscConfig+0x340>)
 8001520:	4013      	ands	r3, r2
 8001522:	0019      	movs	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800152a:	430a      	orrs	r2, r1
 800152c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800152e:	4b66      	ldr	r3, [pc, #408]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	0adb      	lsrs	r3, r3, #11
 8001534:	2207      	movs	r2, #7
 8001536:	4013      	ands	r3, r2
 8001538:	4a68      	ldr	r2, [pc, #416]	; (80016dc <HAL_RCC_OscConfig+0x344>)
 800153a:	40da      	lsrs	r2, r3
 800153c:	4b68      	ldr	r3, [pc, #416]	; (80016e0 <HAL_RCC_OscConfig+0x348>)
 800153e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001540:	4b68      	ldr	r3, [pc, #416]	; (80016e4 <HAL_RCC_OscConfig+0x34c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff fc11 	bl	8000d6c <HAL_InitTick>
 800154a:	1e03      	subs	r3, r0, #0
 800154c:	d051      	beq.n	80015f2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e282      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d030      	beq.n	80015bc <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800155a:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a5e      	ldr	r2, [pc, #376]	; (80016d8 <HAL_RCC_OscConfig+0x340>)
 8001560:	4013      	ands	r3, r2
 8001562:	0019      	movs	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	4b57      	ldr	r3, [pc, #348]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800156e:	4b56      	ldr	r3, [pc, #344]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4b55      	ldr	r3, [pc, #340]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	0049      	lsls	r1, r1, #1
 8001578:	430a      	orrs	r2, r1
 800157a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fc52 	bl	8000e24 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001586:	f7ff fc4d 	bl	8000e24 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e25f      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001598:	4b4b      	ldr	r3, [pc, #300]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4013      	ands	r3, r2
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	4a4a      	ldr	r2, [pc, #296]	; (80016d4 <HAL_RCC_OscConfig+0x33c>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	0019      	movs	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	021a      	lsls	r2, r3, #8
 80015b4:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80015b6:	430a      	orrs	r2, r1
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	e01b      	b.n	80015f4 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80015bc:	4b42      	ldr	r3, [pc, #264]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80015c2:	4949      	ldr	r1, [pc, #292]	; (80016e8 <HAL_RCC_OscConfig+0x350>)
 80015c4:	400a      	ands	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fc2c 	bl	8000e24 <HAL_GetTick>
 80015cc:	0003      	movs	r3, r0
 80015ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff fc27 	bl	8000e24 <HAL_GetTick>
 80015d6:	0002      	movs	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e239      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e4:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4013      	ands	r3, r2
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x23a>
 80015f0:	e000      	b.n	80015f4 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2208      	movs	r2, #8
 80015fa:	4013      	ands	r3, r2
 80015fc:	d047      	beq.n	800168e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80015fe:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2238      	movs	r2, #56	; 0x38
 8001604:	4013      	ands	r3, r2
 8001606:	2b18      	cmp	r3, #24
 8001608:	d10a      	bne.n	8001620 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160e:	2202      	movs	r2, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d03c      	beq.n	800168e <HAL_RCC_OscConfig+0x2f6>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d138      	bne.n	800168e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e21b      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d019      	beq.n	800165c <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001628:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800162a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800162c:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800162e:	2101      	movs	r1, #1
 8001630:	430a      	orrs	r2, r1
 8001632:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fbf6 	bl	8000e24 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163e:	f7ff fbf1 	bl	8000e24 <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e203      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001654:	2202      	movs	r2, #2
 8001656:	4013      	ands	r3, r2
 8001658:	d0f1      	beq.n	800163e <HAL_RCC_OscConfig+0x2a6>
 800165a:	e018      	b.n	800168e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800165e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001662:	2101      	movs	r1, #1
 8001664:	438a      	bics	r2, r1
 8001666:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fbdc 	bl	8000e24 <HAL_GetTick>
 800166c:	0003      	movs	r3, r0
 800166e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001672:	f7ff fbd7 	bl	8000e24 <HAL_GetTick>
 8001676:	0002      	movs	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e1e9      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001688:	2202      	movs	r2, #2
 800168a:	4013      	ands	r3, r2
 800168c:	d1f1      	bne.n	8001672 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2204      	movs	r2, #4
 8001694:	4013      	ands	r3, r2
 8001696:	d100      	bne.n	800169a <HAL_RCC_OscConfig+0x302>
 8001698:	e0c6      	b.n	8001828 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169a:	231f      	movs	r3, #31
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2238      	movs	r2, #56	; 0x38
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b20      	cmp	r3, #32
 80016ac:	d11e      	bne.n	80016ec <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80016b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b2:	2202      	movs	r2, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	d100      	bne.n	80016ba <HAL_RCC_OscConfig+0x322>
 80016b8:	e0b6      	b.n	8001828 <HAL_RCC_OscConfig+0x490>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d000      	beq.n	80016c4 <HAL_RCC_OscConfig+0x32c>
 80016c2:	e0b1      	b.n	8001828 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e1c7      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
 80016c8:	40021000 	.word	0x40021000
 80016cc:	fffeffff 	.word	0xfffeffff
 80016d0:	fffbffff 	.word	0xfffbffff
 80016d4:	ffff80ff 	.word	0xffff80ff
 80016d8:	ffffc7ff 	.word	0xffffc7ff
 80016dc:	00f42400 	.word	0x00f42400
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004
 80016e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016ec:	4bb8      	ldr	r3, [pc, #736]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 80016ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	055b      	lsls	r3, r3, #21
 80016f4:	4013      	ands	r3, r2
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_OscConfig+0x364>
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x366>
 80016fc:	2300      	movs	r3, #0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d011      	beq.n	8001726 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4bb3      	ldr	r3, [pc, #716]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001706:	4bb2      	ldr	r3, [pc, #712]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	0549      	lsls	r1, r1, #21
 800170c:	430a      	orrs	r2, r1
 800170e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001710:	4baf      	ldr	r3, [pc, #700]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	055b      	lsls	r3, r3, #21
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800171e:	231f      	movs	r3, #31
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001726:	4bab      	ldr	r3, [pc, #684]	; (80019d4 <HAL_RCC_OscConfig+0x63c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4013      	ands	r3, r2
 8001730:	d11a      	bne.n	8001768 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001732:	4ba8      	ldr	r3, [pc, #672]	; (80019d4 <HAL_RCC_OscConfig+0x63c>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4ba7      	ldr	r3, [pc, #668]	; (80019d4 <HAL_RCC_OscConfig+0x63c>)
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	0049      	lsls	r1, r1, #1
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001740:	f7ff fb70 	bl	8000e24 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174a:	f7ff fb6b 	bl	8000e24 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e17d      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175c:	4b9d      	ldr	r3, [pc, #628]	; (80019d4 <HAL_RCC_OscConfig+0x63c>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4013      	ands	r3, r2
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x3e6>
 8001770:	4b97      	ldr	r3, [pc, #604]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001772:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001774:	4b96      	ldr	r3, [pc, #600]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001776:	2101      	movs	r1, #1
 8001778:	430a      	orrs	r2, r1
 800177a:	65da      	str	r2, [r3, #92]	; 0x5c
 800177c:	e01c      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b05      	cmp	r3, #5
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x408>
 8001786:	4b92      	ldr	r3, [pc, #584]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001788:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800178a:	4b91      	ldr	r3, [pc, #580]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 800178c:	2104      	movs	r1, #4
 800178e:	430a      	orrs	r2, r1
 8001790:	65da      	str	r2, [r3, #92]	; 0x5c
 8001792:	4b8f      	ldr	r3, [pc, #572]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001794:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001796:	4b8e      	ldr	r3, [pc, #568]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001798:	2101      	movs	r1, #1
 800179a:	430a      	orrs	r2, r1
 800179c:	65da      	str	r2, [r3, #92]	; 0x5c
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
 80017a0:	4b8b      	ldr	r3, [pc, #556]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 80017a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017a4:	4b8a      	ldr	r3, [pc, #552]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 80017a6:	2101      	movs	r1, #1
 80017a8:	438a      	bics	r2, r1
 80017aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80017ac:	4b88      	ldr	r3, [pc, #544]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 80017ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017b0:	4b87      	ldr	r3, [pc, #540]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 80017b2:	2104      	movs	r1, #4
 80017b4:	438a      	bics	r2, r1
 80017b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d014      	beq.n	80017ea <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff fb30 	bl	8000e24 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c8:	e009      	b.n	80017de <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff fb2b 	bl	8000e24 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	4a80      	ldr	r2, [pc, #512]	; (80019d8 <HAL_RCC_OscConfig+0x640>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e13c      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017de:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 80017e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e2:	2202      	movs	r2, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x432>
 80017e8:	e013      	b.n	8001812 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff fb1b 	bl	8000e24 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f2:	e009      	b.n	8001808 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff fb16 	bl	8000e24 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	4a76      	ldr	r2, [pc, #472]	; (80019d8 <HAL_RCC_OscConfig+0x640>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e127      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001808:	4b71      	ldr	r3, [pc, #452]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	2202      	movs	r2, #2
 800180e:	4013      	ands	r3, r2
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001812:	231f      	movs	r3, #31
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800181c:	4b6c      	ldr	r3, [pc, #432]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 800181e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001820:	4b6b      	ldr	r3, [pc, #428]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001822:	496e      	ldr	r1, [pc, #440]	; (80019dc <HAL_RCC_OscConfig+0x644>)
 8001824:	400a      	ands	r2, r1
 8001826:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2220      	movs	r2, #32
 800182e:	4013      	ands	r3, r2
 8001830:	d039      	beq.n	80018a6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01b      	beq.n	8001872 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800183a:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b64      	ldr	r3, [pc, #400]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	03c9      	lsls	r1, r1, #15
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff faec 	bl	8000e24 <HAL_GetTick>
 800184c:	0003      	movs	r3, r0
 800184e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001852:	f7ff fae7 	bl	8000e24 <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e0f9      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001864:	4b5a      	ldr	r3, [pc, #360]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	041b      	lsls	r3, r3, #16
 800186c:	4013      	ands	r3, r2
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x4ba>
 8001870:	e019      	b.n	80018a6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001872:	4b57      	ldr	r3, [pc, #348]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b56      	ldr	r3, [pc, #344]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001878:	4959      	ldr	r1, [pc, #356]	; (80019e0 <HAL_RCC_OscConfig+0x648>)
 800187a:	400a      	ands	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187e:	f7ff fad1 	bl	8000e24 <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001888:	f7ff facc 	bl	8000e24 <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e0de      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800189a:	4b4d      	ldr	r3, [pc, #308]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	4013      	ands	r3, r2
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d100      	bne.n	80018b0 <HAL_RCC_OscConfig+0x518>
 80018ae:	e0d2      	b.n	8001a56 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b0:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2238      	movs	r2, #56	; 0x38
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b10      	cmp	r3, #16
 80018ba:	d100      	bne.n	80018be <HAL_RCC_OscConfig+0x526>
 80018bc:	e081      	b.n	80019c2 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d156      	bne.n	8001974 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 80018cc:	4945      	ldr	r1, [pc, #276]	; (80019e4 <HAL_RCC_OscConfig+0x64c>)
 80018ce:	400a      	ands	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff faa7 	bl	8000e24 <HAL_GetTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff faa2 	bl	8000e24 <HAL_GetTick>
 80018e0:	0002      	movs	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e0b4      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ee:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	049b      	lsls	r3, r3, #18
 80018f6:	4013      	ands	r3, r2
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018fa:	4b35      	ldr	r3, [pc, #212]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	4a3a      	ldr	r2, [pc, #232]	; (80019e8 <HAL_RCC_OscConfig+0x650>)
 8001900:	4013      	ands	r3, r2
 8001902:	0019      	movs	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	431a      	orrs	r2, r3
 8001928:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 800192a:	430a      	orrs	r2, r1
 800192c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001934:	2180      	movs	r1, #128	; 0x80
 8001936:	0449      	lsls	r1, r1, #17
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001942:	2180      	movs	r1, #128	; 0x80
 8001944:	0549      	lsls	r1, r1, #21
 8001946:	430a      	orrs	r2, r1
 8001948:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff fa6b 	bl	8000e24 <HAL_GetTick>
 800194e:	0003      	movs	r3, r0
 8001950:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff fa66 	bl	8000e24 <HAL_GetTick>
 8001958:	0002      	movs	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e078      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	049b      	lsls	r3, r3, #18
 800196e:	4013      	ands	r3, r2
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x5bc>
 8001972:	e070      	b.n	8001a56 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 800197a:	491a      	ldr	r1, [pc, #104]	; (80019e4 <HAL_RCC_OscConfig+0x64c>)
 800197c:	400a      	ands	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001986:	2103      	movs	r1, #3
 8001988:	438a      	bics	r2, r1
 800198a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 8001992:	4916      	ldr	r1, [pc, #88]	; (80019ec <HAL_RCC_OscConfig+0x654>)
 8001994:	400a      	ands	r2, r1
 8001996:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fa44 	bl	8000e24 <HAL_GetTick>
 800199c:	0003      	movs	r3, r0
 800199e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff fa3f 	bl	8000e24 <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e051      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_RCC_OscConfig+0x638>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	049b      	lsls	r3, r3, #18
 80019bc:	4013      	ands	r3, r2
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x60a>
 80019c0:	e049      	b.n	8001a56 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d112      	bne.n	80019f0 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e044      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40007000 	.word	0x40007000
 80019d8:	00001388 	.word	0x00001388
 80019dc:	efffffff 	.word	0xefffffff
 80019e0:	ffbfffff 	.word	0xffbfffff
 80019e4:	feffffff 	.word	0xfeffffff
 80019e8:	11c1808c 	.word	0x11c1808c
 80019ec:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_RCC_OscConfig+0x6c8>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2203      	movs	r2, #3
 80019fa:	401a      	ands	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d126      	bne.n	8001a52 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2270      	movs	r2, #112	; 0x70
 8001a08:	401a      	ands	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d11f      	bne.n	8001a52 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	23fe      	movs	r3, #254	; 0xfe
 8001a16:	01db      	lsls	r3, r3, #7
 8001a18:	401a      	ands	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d116      	bne.n	8001a52 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	23f8      	movs	r3, #248	; 0xf8
 8001a28:	039b      	lsls	r3, r3, #14
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d10e      	bne.n	8001a52 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	23e0      	movs	r3, #224	; 0xe0
 8001a38:	051b      	lsls	r3, r3, #20
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	0f5b      	lsrs	r3, r3, #29
 8001a48:	075a      	lsls	r2, r3, #29
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d001      	beq.n	8001a56 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b008      	add	sp, #32
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0e9      	b.n	8001c4c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b76      	ldr	r3, [pc, #472]	; (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	4013      	ands	r3, r2
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d91e      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b73      	ldr	r3, [pc, #460]	; (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	4393      	bics	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	4b70      	ldr	r3, [pc, #448]	; (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a98:	f7ff f9c4 	bl	8000e24 <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aa0:	e009      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa2:	f7ff f9bf 	bl	8000e24 <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	4a6a      	ldr	r2, [pc, #424]	; (8001c58 <HAL_RCC_ClockConfig+0x1f4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e0ca      	b.n	8001c4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ab6:	4b67      	ldr	r3, [pc, #412]	; (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2207      	movs	r2, #7
 8001abc:	4013      	ands	r3, r2
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1ee      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	4013      	ands	r3, r2
 8001acc:	d015      	beq.n	8001afa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d006      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ad8:	4b60      	ldr	r3, [pc, #384]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	4b5f      	ldr	r3, [pc, #380]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001ade:	21e0      	movs	r1, #224	; 0xe0
 8001ae0:	01c9      	lsls	r1, r1, #7
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae6:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4a5d      	ldr	r2, [pc, #372]	; (8001c60 <HAL_RCC_ClockConfig+0x1fc>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4b59      	ldr	r3, [pc, #356]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001af6:	430a      	orrs	r2, r1
 8001af8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2201      	movs	r2, #1
 8001b00:	4013      	ands	r3, r2
 8001b02:	d057      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	029b      	lsls	r3, r3, #10
 8001b14:	4013      	ands	r3, r2
 8001b16:	d12b      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e097      	b.n	8001c4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d107      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b24:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	049b      	lsls	r3, r3, #18
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d11f      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e08b      	b.n	8001c4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b3c:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4013      	ands	r3, r2
 8001b46:	d113      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e07f      	b.n	8001c4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b54:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b58:	2202      	movs	r2, #2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d108      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e074      	b.n	8001c4c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b62:	4b3e      	ldr	r3, [pc, #248]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	2202      	movs	r2, #2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e06d      	b.n	8001c4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b70:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2207      	movs	r2, #7
 8001b76:	4393      	bics	r3, r2
 8001b78:	0019      	movs	r1, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001b80:	430a      	orrs	r2, r1
 8001b82:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b84:	f7ff f94e 	bl	8000e24 <HAL_GetTick>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8c:	e009      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8e:	f7ff f949 	bl	8000e24 <HAL_GetTick>
 8001b92:	0002      	movs	r2, r0
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	4a2f      	ldr	r2, [pc, #188]	; (8001c58 <HAL_RCC_ClockConfig+0x1f4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e054      	b.n	8001c4c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2238      	movs	r2, #56	; 0x38
 8001ba8:	401a      	ands	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1ec      	bne.n	8001b8e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2207      	movs	r2, #7
 8001bba:	4013      	ands	r3, r2
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d21e      	bcs.n	8001c00 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	4393      	bics	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bd4:	f7ff f926 	bl	8000e24 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bdc:	e009      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bde:	f7ff f921 	bl	8000e24 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <HAL_RCC_ClockConfig+0x1f4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e02c      	b.n	8001c4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1ee      	bne.n	8001bde <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2204      	movs	r2, #4
 8001c06:	4013      	ands	r3, r2
 8001c08:	d009      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <HAL_RCC_ClockConfig+0x200>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	0019      	movs	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c1e:	f000 f829 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001c22:	0001      	movs	r1, r0
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_RCC_ClockConfig+0x204>)
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	58d3      	ldr	r3, [r2, r3]
 8001c34:	221f      	movs	r2, #31
 8001c36:	4013      	ands	r3, r2
 8001c38:	000a      	movs	r2, r1
 8001c3a:	40da      	lsrs	r2, r3
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_ClockConfig+0x208>)
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_RCC_ClockConfig+0x20c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0018      	movs	r0, r3
 8001c46:	f7ff f891 	bl	8000d6c <HAL_InitTick>
 8001c4a:	0003      	movs	r3, r0
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b004      	add	sp, #16
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40022000 	.word	0x40022000
 8001c58:	00001388 	.word	0x00001388
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	fffff0ff 	.word	0xfffff0ff
 8001c64:	ffff8fff 	.word	0xffff8fff
 8001c68:	08001e28 	.word	0x08001e28
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c7a:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2238      	movs	r2, #56	; 0x38
 8001c80:	4013      	ands	r3, r2
 8001c82:	d10f      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c84:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0adb      	lsrs	r3, r3, #11
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2201      	movs	r2, #1
 8001c90:	409a      	lsls	r2, r3
 8001c92:	0013      	movs	r3, r2
 8001c94:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c96:	6839      	ldr	r1, [r7, #0]
 8001c98:	4835      	ldr	r0, [pc, #212]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c9a:	f7fe fa33 	bl	8000104 <__udivsi3>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	e05d      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca4:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2238      	movs	r2, #56	; 0x38
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d102      	bne.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cb0:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x100>)
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	e054      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb6:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2238      	movs	r2, #56	; 0x38
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b10      	cmp	r3, #16
 8001cc0:	d138      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001cc2:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d10d      	bne.n	8001cfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	4824      	ldr	r0, [pc, #144]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ce4:	f7fe fa0e 	bl	8000104 <__udivsi3>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	0019      	movs	r1, r3
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	227f      	movs	r2, #127	; 0x7f
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	434b      	muls	r3, r1
 8001cf8:	617b      	str	r3, [r7, #20]
        break;
 8001cfa:	e00d      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	481c      	ldr	r0, [pc, #112]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d00:	f7fe fa00 	bl	8000104 <__udivsi3>
 8001d04:	0003      	movs	r3, r0
 8001d06:	0019      	movs	r1, r3
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	227f      	movs	r2, #127	; 0x7f
 8001d10:	4013      	ands	r3, r2
 8001d12:	434b      	muls	r3, r1
 8001d14:	617b      	str	r3, [r7, #20]
        break;
 8001d16:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0f5b      	lsrs	r3, r3, #29
 8001d1e:	2207      	movs	r2, #7
 8001d20:	4013      	ands	r3, r2
 8001d22:	3301      	adds	r3, #1
 8001d24:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	6978      	ldr	r0, [r7, #20]
 8001d2a:	f7fe f9eb 	bl	8000104 <__udivsi3>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	e015      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2238      	movs	r2, #56	; 0x38
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d103      	bne.n	8001d48 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2238      	movs	r2, #56	; 0x38
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b18      	cmp	r3, #24
 8001d52:	d103      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d54:	23fa      	movs	r3, #250	; 0xfa
 8001d56:	01db      	lsls	r3, r3, #7
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	e001      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d60:	693b      	ldr	r3, [r7, #16]
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b006      	add	sp, #24
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	007a1200 	.word	0x007a1200

08001d78 <__libc_init_array>:
 8001d78:	b570      	push	{r4, r5, r6, lr}
 8001d7a:	2600      	movs	r6, #0
 8001d7c:	4d0c      	ldr	r5, [pc, #48]	; (8001db0 <__libc_init_array+0x38>)
 8001d7e:	4c0d      	ldr	r4, [pc, #52]	; (8001db4 <__libc_init_array+0x3c>)
 8001d80:	1b64      	subs	r4, r4, r5
 8001d82:	10a4      	asrs	r4, r4, #2
 8001d84:	42a6      	cmp	r6, r4
 8001d86:	d109      	bne.n	8001d9c <__libc_init_array+0x24>
 8001d88:	2600      	movs	r6, #0
 8001d8a:	f000 f821 	bl	8001dd0 <_init>
 8001d8e:	4d0a      	ldr	r5, [pc, #40]	; (8001db8 <__libc_init_array+0x40>)
 8001d90:	4c0a      	ldr	r4, [pc, #40]	; (8001dbc <__libc_init_array+0x44>)
 8001d92:	1b64      	subs	r4, r4, r5
 8001d94:	10a4      	asrs	r4, r4, #2
 8001d96:	42a6      	cmp	r6, r4
 8001d98:	d105      	bne.n	8001da6 <__libc_init_array+0x2e>
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
 8001d9c:	00b3      	lsls	r3, r6, #2
 8001d9e:	58eb      	ldr	r3, [r5, r3]
 8001da0:	4798      	blx	r3
 8001da2:	3601      	adds	r6, #1
 8001da4:	e7ee      	b.n	8001d84 <__libc_init_array+0xc>
 8001da6:	00b3      	lsls	r3, r6, #2
 8001da8:	58eb      	ldr	r3, [r5, r3]
 8001daa:	4798      	blx	r3
 8001dac:	3601      	adds	r6, #1
 8001dae:	e7f2      	b.n	8001d96 <__libc_init_array+0x1e>
 8001db0:	08001e68 	.word	0x08001e68
 8001db4:	08001e68 	.word	0x08001e68
 8001db8:	08001e68 	.word	0x08001e68
 8001dbc:	08001e6c 	.word	0x08001e6c

08001dc0 <memset>:
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	1882      	adds	r2, r0, r2
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d100      	bne.n	8001dca <memset+0xa>
 8001dc8:	4770      	bx	lr
 8001dca:	7019      	strb	r1, [r3, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	e7f9      	b.n	8001dc4 <memset+0x4>

08001dd0 <_init>:
 8001dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dd6:	bc08      	pop	{r3}
 8001dd8:	469e      	mov	lr, r3
 8001dda:	4770      	bx	lr

08001ddc <_fini>:
 8001ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001de2:	bc08      	pop	{r3}
 8001de4:	469e      	mov	lr, r3
 8001de6:	4770      	bx	lr
